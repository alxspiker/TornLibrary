// ==UserScript==
// @name         TornLibrary
// @namespace    Torn_JS_Library
// @version      1.0.1
// @description  The Ultimate Torn.com Userscript Library. Provides a comprehensive suite of tools for configuration, API interaction, DOM manipulation, UI generation, and data handling, built from the knowledge of the community's best scripts.
// @author       Generated by AI based on community scripts
// @match        https://www.torn.com/*
// @grant        GM_setValue
// @grant        GM_getValue
// @grant        GM_deleteValue
// @grant        GM_addStyle
// @grant        GM_info
// @grant        GM_setClipboard
// @grant        GM_xmlhttpRequest
// @connect      api.torn.com
// ==/UserScript==

/**
 * # TornLibrary - The Ultimate Torn.com Userscript Library
 *
 * @version 1.0.1
 *
 * A comprehensive suite of tools for building powerful, modern userscripts for Torn.com.
 * This library abstracts away repetitive and complex tasks, allowing developers to focus on features.
 *
 * To use this library, include it in your userscript's metadata block:
 * `@require https://path/to/your/copy/of/TornLibrary.user.js`
 *
 * ---
 * ## Built From the Knowledge Of:
 * This library was constructed exclusively from the patterns and logic found in the following userscripts.
 * Credit for the foundational concepts belongs to their authors:
 *
 * - Egg Finder by **Lazerpent [2112641]**
 * - Heasley's Egg Navigator by **Heasleys4hemp [1468764]**
 * - torn-crime-crack-helper by **nodelore [2786679] & NEvaldas [352097]**
 * - Torn Fast Slots by **Ramin Quluzade & Silmaril [2665762]**
 * - Torn Pickpocketing Colors by **Korbrm [2931507]**
 * - Torn Crimes Burglary Extended by **Ramin Quluzade & Silmaril [2665762]**
 * - Pickpocket J.A.R.V.I.S. by **Terekhov**
 * - Torn Bazaar Filler by **Ramin Quluzade & Silmaril [2665762]**
 * - Torn Racing Telemetry by **TheProgrammer [2782979]**
 * - Torn Transform Text to Numeric Input by **TheProgrammer [2782979]**
 * - Torn Chain Payout Calculator by **its author**
 */
const TornLibrary = {};

TornLibrary.utils = {
    /**
     * General-Purpose Utility Functions.
     */
    /**
     * Checks if the current view is likely a mobile device based on screen width.
     * @returns {boolean}
     */
    isMobile: () => window.innerWidth <= 784,

    /**
     * Checks if the script is running in the Torn PDA mobile app.
     * @returns {boolean}
     */
    isPDA: () => typeof window.flutter_inappwebview?.callHandler === 'function',

    /**
     * A promise-based sleep function.
     * @param {number} ms - The number of milliseconds to wait.
     * @returns {Promise<void>}
     */
    sleep: (ms) => new Promise(resolve => setTimeout(resolve, ms)),

    /**
     * Copies text to the user's clipboard, handling both Tampermonkey and standard browser APIs.
     * @param {string} text - The text to copy.
     * @returns {Promise<void>}
     */
    copyToClipboard: async (text) => {
        if (typeof GM_setClipboard === 'function') {
            GM_setClipboard(text, 'text');
        } else if (navigator.clipboard && navigator.clipboard.writeText) {
            await navigator.clipboard.writeText(text);
        } else {
            throw new Error("Clipboard API not available.");
        }
    },

    /**
     * Formats a number as a currency string (e.g., $1,234,567).
     * @param {number} num - The number to format.
     * @returns {string} The formatted currency string.
     */
    formatCurrency: (num) => '$' + Math.round(num).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ','),

    /**
     * Formats a Unix timestamp or Date object into a YYYY-MM-DD string.
     * @param {number|Date} timestamp - The timestamp (in ms) or Date object.
     * @param {boolean} [includeTime=false] - Whether to include the HH:MM:SS time.
     * @returns {string} The formatted date string.
     */
    formatDate: (timestamp, includeTime = false) => {
         try {
            const date = new Date(timestamp);
            const dateString = date.toISOString().split('T')[0];
            if (includeTime) {
                const timeString = date.toLocaleTimeString([], { hour12: false });
                return `${dateString} ${timeString}`;
            }
            return dateString;
        } catch (e) { return 'N/A'; }
    },

    /**
     * Calculates a new value based on a starting number and an operation string (e.g., "-1", "+10%").
     * @param {number} baseNumber - The starting number.
     * @param {string} operationString - The operation to perform (e.g., '-1', '+500', '-10%').
     * @returns {number} The result of the calculation.
     */
    calculate: (baseNumber, operationString) => {
        const match = operationString.match(/^([-+]?)([\d.]+)(%)?$/);
        if (!match) return baseNumber;
        const [, operator, operand, isPercent] = match;
        const value = isPercent ? (baseNumber * parseFloat(operand)) / 100 : parseFloat(operand);
        return operator === '-' ? baseNumber - value : baseNumber + value;
    },

    /**
     * Extracts a Torn item ID from a standard item image URL.
     * @param {string} imageUrl - The full URL of the item's image.
     * @returns {string|null} The extracted item ID or null if not found.
     */
    getItemIdFromUrl: (imageUrl) => {
        const match = imageUrl.match(/\/(\d+)\//);
        return match ? match[1] : null;
    },

    /**
     * Safely escapes a string for use in a CSV field.
     * @param {*} field - The value to escape.
     * @returns {string} The escaped string.
     */
    escapeCSVField: (field) => {
        const str = String(field ?? '');
        if (str.includes(',') || str.includes('"') || str.includes('\n')) {
            return `"${str.replace(/"/g, '""')}"`;
        }
        return str;
    },

    /**
     * Escapes a string for safe insertion into HTML.
     * @param {*} str - The value to escape.
     * @returns {string} The escaped string.
     */
    escapeHTML: (str) => {
         const div = document.createElement('div');
         div.appendChild(document.createTextNode(String(str ?? '')));
         return div.innerHTML;
    },

    /**
     * Gets information about the running userscript from its metadata block.
     * @returns {object|null} An object with script info, or null if GM_info is not available.
     */
    getScriptInfo: () => (typeof GM_info !== 'undefined' ? GM_info.script : null),

    /**
     * A sub-module for common mathematical functions.
     */
    math: {
        /**
         * Calculates the Exponential Moving Average.
         * @param {number} current - The current value.
         * @param {number} previous - The previous EMA value.
         * @param {number} alpha - The smoothing factor (0 to 1).
         * @returns {number} The new EMA value.
         */
        ema: (current, previous, alpha) => {
            if (typeof previous !== 'number' || !isFinite(previous)) return current;
            return alpha * current + (1 - alpha) * previous;
        },

        /**
         * Interpolates between two RGB colors.
         * @param {Array<number>} rgb1 - The starting color as [r, g, b].
         * @param {Array<number>} rgb2 - The ending color as [r, g, b].
         * @param {number} factor - The interpolation factor (0 to 1).
         * @returns {string} The resulting CSS rgb() color string.
         */
        interpolateColor: (rgb1, rgb2, factor) => {
            const result = rgb1.map((c, i) => Math.round(c + factor * (rgb2[i] - c)));
            return `rgb(${result.join(',')})`;
        }
    }
};

TornLibrary.config = {
    /**
     * Configuration Management.
     */
    _data: {},
    _defaults: {},
    _storageKey: 'TornLibraryConfig',
    _apiKeyStorageKey: 'TornLibraryApiKey',

    /**
     * Initializes the config manager for a script. This must be awaited.
     * @param {string} storageKey - A unique key for this script's settings (e.g., 'MyScriptConfig').
     * @param {object} defaults - An object containing default values for all settings.
     * @returns {Promise<void>}
     */
    async init(storageKey, defaults) {
        this._storageKey = storageKey;
        this._apiKeyStorageKey = `${storageKey}_apiKey`;
        this._defaults = { ...defaults };
        try {
            // **FIX**: Use async GM wrapper
            const storedData = await TornLibrary.storage.gm.getValue(this._storageKey, '{}');
            const storedApiKey = await TornLibrary.storage.gm.getValue(this._apiKeyStorageKey, '');

            this._data = { ...this._defaults, ...JSON.parse(storedData) };
            this._data.apiKey = storedApiKey;
        } catch (e) {
            console.error('TornLibrary.config: Failed to load configuration.', e);
            const storedApiKey = await TornLibrary.storage.gm.getValue(this._apiKeyStorageKey, '');
            this._data = { ...this._defaults, apiKey: storedApiKey };
        }
        // Ensure all default keys exist in the loaded data
        for (const key in this._defaults) {
            if (!(key in this._data)) this._data[key] = this._defaults[key];
        }
    },

    /**
     * Saves all current settings (except API key) to storage.
     * @returns {Promise<void>}
     */
    async save() {
        const dataToSave = { ...this._data };
        delete dataToSave.apiKey;
        // **FIX**: Use async GM wrapper
        await TornLibrary.storage.gm.setValue(this._storageKey, JSON.stringify(dataToSave));
    },

    get(key) {
        return key in this._data ? this._data[key] : (this._defaults[key] || undefined);
    },

    /**
     * Sets a configuration value and saves it.
     * @param {string} key - The key of the setting.
     * @param {*} value - The value to set.
     * @returns {Promise<void>}
     */
    async set(key, value) {
        this._data[key] = value;
        if (key === 'apiKey') {
            // **FIX**: Use async GM wrapper
            await TornLibrary.storage.gm.setValue(this._apiKeyStorageKey, value);
        } else {
            await this.save();
        }
    },

    /**
     * Resets all settings to their defaults. The API key is preserved.
     * @returns {Promise<void>}
     */
    async clear() {
        this._data = { ...this._defaults, apiKey: this.get('apiKey') };
        await this.save();
    }
};

TornLibrary.api = {
    /**
     * Torn API v2 Interaction Utilities.
     * Features a request queue for proactive rate-limiting, intelligent caching,
     * and developer-friendly helper functions for all API endpoints.
     */
    _apiKey: null,
    _cache: new Map(),
    _requestQueue: [],
    _isProcessingQueue: false,
    _rateLimitDelay: 600, // ms between requests. Default: 100 requests/minute.

    /**
     * Initializes the API module with the user's key and rate limit.
     * This must be called before making any API calls.
     * @param {string} apiKey - The Torn API key.
     * @param {number} [rateLimit=100] - The number of requests per minute your key is allowed.
     */
    init(apiKey, rateLimit = 100) {
        this._apiKey = apiKey;
        this._rateLimitDelay = Math.ceil(60000 / Math.max(1, rateLimit)); // Prevent division by zero.
    },

    /**
     * Promise-based wrapper for GM_xmlhttpRequest. @private
     */
    _request(details) {
        return new Promise((resolve, reject) => {
            details.onload = (response) => {
                if (response.status >= 200 && response.status < 400) {
                    resolve(response);
                } else {
                    reject(new Error(`HTTP error ${response.status}: ${response.statusText}`));
                }
            };
            details.onerror = () => reject(new Error('Network error during API request.'));
            details.ontimeout = () => reject(new Error('API request timed out.'));
            GM_xmlhttpRequest(details);
        });
    },

    /**
     * Processes the request queue one by one, respecting the rate limit. @private
     */
    async _processQueue() {
        if (this._isProcessingQueue || this._requestQueue.length === 0) return;
        this._isProcessingQueue = true;

        const { resolve, reject, details } = this._requestQueue.shift();

        try {
            const response = await this._request(details);
            const data = JSON.parse(response.responseText);

            if (data.error) {
                if (data.error.code === 2) { // Invalid Key
                    console.error("TornLibrary: API key has been invalidated. Please update it.");
                    // Attempt to clear it if the config module is in use.
                    if (TornLibrary.config && typeof TornLibrary.config.set === 'function') {
                       await TornLibrary.config.set('apiKey', '');
                    }
                }
                throw new Error(`API Error: ${data.error.error} (Code ${data.error.code})`);
            }
            
            resolve(data);
        } catch (error) {
            reject(error);
        } finally {
            setTimeout(() => {
                this._isProcessingQueue = false;
                this._processQueue();
            }, this._rateLimitDelay);
        }
    },
    
    /**
     * The core internal method for creating and queueing an API request. @private
     */
    _call({ path, pathParams = {}, queryParams = {}, options = {} }) {
        if (!this._apiKey) {
            return Promise.reject(new Error("API key not set. Call TornLibrary.api.init(key) first."));
        }

        let finalPath = path;
        for (const key in pathParams) {
            finalPath = finalPath.replace(`{${key}}`, encodeURIComponent(pathParams[key]));
        }

        const finalQueryParams = { ...queryParams, key: this._apiKey };
        if (options.comment) finalQueryParams.comment = options.comment;
        if (options.timestamp) finalQueryParams.timestamp = Math.floor(Date.now() / 1000);
        
        const queryString = Object.entries(finalQueryParams)
            .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`)
            .join('&');

        const requestUrl = `https://api.torn.com/v2${finalPath}?${queryString}`;
        
        const cacheKey = requestUrl;
        const { cache } = options;
        if (cache && this._cache.has(cacheKey)) {
            const cached = this._cache.get(cacheKey);
            if (Date.now() - cached.timestamp < (cache.ttl || 3600000)) {
                return Promise.resolve(cached.data);
            }
        }
        
        return new Promise((resolve, reject) => {
            this._requestQueue.push({
                resolve: (data) => {
                    if (cache) {
                        this._cache.set(cacheKey, { data, timestamp: Date.now() });
                    }
                    resolve(data);
                },
                reject,
                details: { method: 'GET', url: requestUrl, timeout: 15000 }
            });
            this._processQueue();
        });
    },

    /**
     * Separates path and query params for the helper functions. @private
     */
    _prepareParams(path, params = {}) {
        const pathParams = {};
        const queryParams = { ...params };
        const matches = path.match(/{(\w+)}/g);
        if (matches) {
            matches.forEach(placeholder => {
                const key = placeholder.slice(1, -1);
                if (params[key] !== undefined) {
                    pathParams[key] = params[key];
                    delete queryParams[key];
                }
            });
        }
        return { pathParams, queryParams };
    },

    /**
     * =================================================================================
     * USER SECTION
     * =================================================================================
     */
    user: {
        _call: function(path, params, options) {
            const { pathParams, queryParams } = TornLibrary.api._prepareParams(path, params);
            return TornLibrary.api._call({ path, pathParams, queryParams, options });
        },

        /**
         * Get your detailed attacks. Requires limited access key.
         * @param {object} [params] - Optional parameters for the call.
         * @param {number} [params.limit=100] - Number of results to return.
         * @param {string} [params.sort] - Sort order 'DESC' or 'ASC'.
         * @param {number} [params.to] - Upper timestamp limit.
         * @param {number} [params.from] - Lower timestamp limit.
         * @param {object} [options] - Library-specific options.
         * @param {boolean} [options.cache=false] - If true, caches the response.
         * @param {number} [options.ttl=3600000] - Cache time-to-live in ms.
         * @param {string} [options.comment] - A comment to include in the API log.
         * @param {boolean} [options.timestamp=false] - If true, adds a timestamp to bypass server cache.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        attacks: function(p, o) { return this._call('/user/attacks', p, o); },

        /**
         * Get your simplified attacks. Requires limited access key. Returns up to 1,000 rows.
         * @param {object} [params] - Optional parameters for the call.
         * @param {number} [params.limit=1000] - Number of results to return.
         * @param {string} [params.sort] - Sort order 'DESC' or 'ASC'.
         * @param {number} [params.to] - Upper timestamp limit.
         * @param {number} [params.from] - Lower timestamp limit.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        attacksfull: function(p, o) { return this._call('/user/attacksfull', p, o); },

        /**
         * Get bounties placed on a specific user. Requires public access key.
         * @param {object} [params] - Optional parameters for the call.
         * @param {number} [params.id] - User ID. If omitted, fetches your own bounties.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        bounties: function(p, o) { return this._call(p && p.id ? '/user/{id}/bounties' : '/user/bounties', p, o); },

        /**
         * Get your competition's event start time. Requires minimal access key. Only available to yourself.
         * @param {object} [params] - Optional parameters for the call.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        calendar: function(p, o) { return this._call('/user/calendar', p, o); },

        /**
         * Get your crime statistics for a specific crime. Requires minimal access key.
         * @param {object} params - Parameters for the call.
         * @param {number} params.crimeId - The ID of the crime.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        crimes: function(p, o) { return this._call('/user/{crimeId}/crimes', p, o); },

        /**
         * Get your education information. Requires public access key.
         * @param {object} [params] - Optional parameters for the call.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        education: function(p, o) { return this._call('/user/education', p, o); },

        /**
         * Get your enlisted cars. Requires minimal access key.
         * @param {object} [params] - Optional parameters for the call.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        enlistedcars: function(p, o) { return this._call('/user/enlistedcars', p, o); },

        /**
         * Get your current faction balance. Requires limited access key.
         * @param {object} [params] - Optional parameters for the call.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        factionbalance: function(p, o) { return this._call('/user/factionbalance', p, o); },

        /**
         * Get updates on your threads and posts. Requires minimal access key.
         * @param {object} [params] - Optional parameters for the call.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        forumfeed: function(p, o) { return this._call('/user/forumfeed', p, o); },

        /**
         * Get updates on your friends' activity. Requires minimal access key.
         * @param {object} [params] - Optional parameters for the call.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        forumfriends: function(p, o) { return this._call('/user/forumfriends', p, o); },
        
        /**
         * Get forum posts for a specific player. Requires public access key.
         * @param {object} [params] - Optional parameters for the call.
         * @param {number} [params.id] - User ID. If omitted, fetches your own posts.
         * @param {number} [params.limit=20] - Number of results to return.
         * @param {string} [params.sort] - Sort order 'DESC' or 'ASC'.
         * @param {number} [params.to] - Upper timestamp limit.
         * @param {number} [params.from] - Lower timestamp limit.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        forumposts: function(p, o) { return this._call(p && p.id ? '/user/{id}/forumposts' : '/user/forumposts', p, o); },

        /**
         * Get updates on threads you subscribed to. Requires minimal access key.
         * @param {object} [params] - Optional parameters for the call.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        forumsubscribedthreads: function(p, o) { return this._call('/user/forumsubscribedthreads', p, o); },

        /**
         * Get threads for a specific player. Requires public access key.
         * @param {object} [params] - Optional parameters for the call.
         * @param {number} [params.id] - User ID. If omitted, fetches your own threads.
         * @param {number} [params.limit=20] - Number of results to return (max 100).
         * @param {string} [params.sort] - Sort order 'DESC' or 'ASC'.
         * @param {number} [params.to] - Upper timestamp limit.
         * @param {number} [params.from] - Lower timestamp limit.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        forumthreads: function(p, o) { return this._call(p && p.id ? '/user/{id}/forumthreads' : '/user/forumthreads', p, o); },

        /**
         * Get hall of fame rankings for a specific player. Requires public access key.
         * @param {object} [params] - Optional parameters for the call.
         * @param {number} [params.id] - User ID. If omitted, fetches your own rankings.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        hof: function(p, o) { return this._call(p && p.id ? '/user/{id}/hof' : '/user/hof', p, o); },

        /**
         * Get your item market listings. Requires limited access key.
         * @param {object} [params] - Optional parameters for the call.
         * @param {number} [params.offset=0] - Starting position of the results.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        itemmarket: function(p, o) { return this._call('/user/itemmarket', p, o); },

        /**
         * Get your starter job positions. Requires minimal access key.
         * @param {object} [params] - Optional parameters for the call.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        jobranks: function(p, o) { return this._call('/user/jobranks', p, o); },

        /**
         * Get your friends, enemies or targets list. Requires limited access key.
         * @param {object} params - Parameters for the call.
         * @param {string} params.cat - List type: 'Friends', 'Enemies', or 'Targets'.
         * @param {number} [params.limit=50] - Number of results to return.
         * @param {number} [params.offset] - Starting position of the results.
         * @param {string} [params.sort=ASC] - Sort order.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        list: function(p, o) { return this._call('/user/list', p, o); },

        /**
         * Get your current ongoing organized crime. Requires minimal access key.
         * @param {object} [params] - Optional parameters for the call.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        organizedcrime: function(p, o) { return this._call('/user/organizedcrime', p, o); },

        /**
         * Get a player's personal stats. Requires public access key.
         * @param {object} [params] - Optional parameters for the call.
         * @param {number} [params.id] - User ID. If omitted, fetches your own stats.
         * @param {string} [params.cat] - Stats category (e.g., 'all', 'popular', 'attacking').
         * @param {string[]} [params.stat] - Array of specific stat names for historical data.
         * @param {number} [params.timestamp] - Timestamp for historical stat lookup.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        personalstats: function(p, o) { return this._call(p && p.id ? '/user/{id}/personalstats' : '/user/personalstats', p, o); },

        /**
         * Get a specific user's properties. Requires public access key.
         * @param {object} [params] - Optional parameters for the call.
         * @param {number} [params.id] - User ID. If omitted, fetches your own properties.
         * @param {number} [params.offset=0] - Starting position.
         * @param {number} [params.limit=20] - Number of results (max 100).
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        properties: function(p, o) { return this._call(p && p.id ? '/user/{id}/properties' : '/user/properties', p, o); },

        /**
         * Get a specific user's current property. Requires public access key.
         * @param {object} [params] - Optional parameters for the call.
         * @param {number} [params.id] - User ID. If omitted, fetches your own property.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        property: function(p, o) { return this._call(p && p.id ? '/user/{id}/property' : '/user/property', p, o); },

        /**
         * Get your races. Requires minimal access key.
         * @param {object} [params] - Optional parameters for the call.
         * @param {number} [params.limit=20] - Number of results (max 100).
         * @param {string} [params.sort] - Sort order 'DESC' or 'ASC'.
         * @param {number} [params.from] - Lower timestamp limit.
         * @param {number} [params.to] - Upper timestamp limit.
         * @param {string} [params.cat] - Race category: 'official' or 'custom'.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        races: function(p, o) { return this._call('/user/races', p, o); },

        /**
         * Get your current racing records. Requires minimal access key.
         * @param {object} [params] - Optional parameters for the call.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        racingrecords: function(p, o) { return this._call('/user/racingrecords', p, o); },

        /**
         * Get your reports. Requires limited access key.
         * @param {object} [params] - Optional parameters for the call.
         * @param {string} [params.cat] - Report type to filter by.
         * @param {number} [params.target] - Target User ID to filter by.
         * @param {number} [params.limit=20] - Number of results (max 100).
         * @param {number} [params.offset=0] - Starting position.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        reports: function(p, o) { return this._call('/user/reports', p, o); },
        
        /**
         * Get your detailed revives. Requires limited access key.
         * @param {object} [params] - Optional parameters for the call.
         * @param {number} [params.limit=20] - Number of results (max 100).
         * @param {string} [params.sort] - Sort order 'DESC' or 'ASC'.
         * @param {number} [params.from] - Lower timestamp limit.
         * @param {number} [params.to] - Upper timestamp limit.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        revives: function(p, o) { return this._call('/user/revives', p, o); },

        /**
         * Get your simplified revives. Requires limited access key.
         * @param {object} [params] - Optional parameters for the call.
         * @param {number} [params.limit=20] - Number of results (max 1000).
         * @param {string} [params.sort] - Sort order 'DESC' or 'ASC'.
         * @param {number} [params.from] - Lower timestamp limit.
         * @param {number} [params.to] - Upper timestamp limit.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        revivesfull: function(p, o) { return this._call('/user/revivesfull', p, o); },

        /**
         * Get all available user selections. Requires public access key.
         * @param {object} [params] - Optional parameters for the call.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        lookup: function(p, o) { return this._call('/user/lookup', p, o); },

        /**
         * Get current server time. Requires public access key.
         * @param {object} [params] - Optional parameters for the call.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        timestamp: function(p, o) { return this._call('/user/timestamp', p, o); },

        /**
         * Makes a call to the legacy v1-style user endpoint.
         * @param {string} selections - Comma-separated list of selections (e.g., "profile,bazaar,inventory").
         * @param {string} [id] - The user ID to query. Defaults to the key owner.
         * @param {object} [params] - Additional query parameters like `from`, `to`.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        legacy: function(s, id = '', p, o) { return TornLibrary.api._call({ path: '/user', queryParams: { selections: s, id, ...p }, options: o }); }
    },

    /**
     * =================================================================================
     * FACTION SECTION
     * =================================================================================
     */
    faction: {
         _call: function(path, params, options) {
            const { pathParams, queryParams } = TornLibrary.api._prepareParams(path, params);
            return TornLibrary.api._call({ path, pathParams, queryParams, options });
        },

        /**
         * Get your faction's applications. Requires minimal access key with faction API access permissions.
         * @param {object} [params] - Optional parameters.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        applications: function(p, o) { return this._call('/faction/applications', p, o); },

        /**
         * Get your faction's detailed attacks. Requires limited access key with faction API access permissions.
         * @param {object} [params] - Optional parameters.
         * @param {number} [params.limit=100] - Max 100.
         * @param {string} [params.sort='DESC'] - Sort order.
         * @param {number} [params.from] - Start timestamp.
         * @param {number} [params.to] - End timestamp.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        attacks: function(p, o) { return this._call('/faction/attacks', p, o); },

        /**
         * Get your faction's simplified attacks. Requires limited access key with faction API access permissions.
         * @param {object} [params] - Optional parameters.
         * @param {number} [params.limit=1000] - Max 1000.
         * @param {string} [params.sort='DESC'] - Sort order.
         * @param {number} [params.from] - Start timestamp.
         * @param {number} [params.to] - End timestamp.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        attacksfull: function(p, o) { return this._call('/faction/attacksfull', p, o); },

        /**
         * Get your faction's & member's balance details. Requires limited access key with faction API access permissions.
         * @param {object} [params] - Optional parameters.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        balance: function(p, o) { return this._call('/faction/balance', p, o); },

        /**
         * Get a faction's basic details. Requires public access key.
         * @param {object} [params] - Optional parameters.
         * @param {number} [params.id] - Faction ID. If omitted, fetches your own faction's details.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        basic: function(p, o) { return this._call(p && p.id ? '/faction/{id}/basic' : '/faction/basic', p, o); },

        /**
         * Get a faction's current chain. Requires public access key.
         * @param {object} [params] - Optional parameters.
         * @param {number} [params.id] - Faction ID. If omitted, fetches your own faction's chain.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        chain: function(p, o) { return this._call(p && p.id ? '/faction/{id}/chain' : '/faction/chain', p, o); },

        /**
         * Get a list of a faction's completed chains. Requires public access key.
         * @param {object} [params] - Optional parameters.
         * @param {number} [params.id] - Faction ID. If omitted, fetches your own faction's chains.
         * @param {number} [params.limit=100] - Max 100.
         * @param {string} [params.sort='DESC'] - Sort order.
         * @param {number} [params.from] - Start timestamp.
         * @param {number} [params.to] - End timestamp.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        chains: function(p, o) { return this._call(p && p.id ? '/faction/{id}/chains' : '/faction/chains', p, o); },

        /**
         * Get a chain report. Requires public access key.
         * @param {object} [params] - Optional parameters.
         * @param {number} [params.chainId] - Chain ID. If omitted, fetches your faction's latest report.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        chainreport: function(p, o) { return this._call(p && p.chainId ? '/faction/{chainId}/chainreport' : '/faction/chainreport', p, o); },

        /**
         * Get your faction's challenge contributors. Requires limited access key with faction API access permissions.
         * @param {object} params - Parameters for the call.
         * @param {string} params.stat - The stat to get contributors for.
         * @param {string} [params.cat] - 'all' or 'current'.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        contributors: function(p, o) { return this._call('/faction/contributors', p, o); },

        /**
         * Get your faction's organized crimes. Requires minimal access key with faction API access permissions.
         * @param {object} [params] - Optional parameters.
         * @param {string} [params.cat] - OC category.
         * @param {string} [params.filters] - Field to sort by.
         * @param {number} [params.offset=0] - Starting position.
         * @param {number} [params.from] - Start timestamp.
         * @param {number} [params.to] - End timestamp.
         * @param {string} [params.sort='DESC'] - Sort order.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        crimes: function(p, o) { return this._call('/faction/crimes', p, o); },
        
        /**
         * Get a specific organized crime. Requires minimal access key with faction API access permissions.
         * @param {object} params - Parameters for the call.
         * @param {number} params.crimeId - The ID of the organized crime.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        crime: function(p, o) { return this._call('/faction/{crimeId}/crime', p, o); },

        /**
         * Get a faction's hall of fame rankings. Requires public access key.
         * @param {object} [params] - Optional parameters.
         * @param {number} [params.id] - Faction ID. If omitted, fetches your faction's rankings.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        hof: function(p, o) { return this._call(p && p.id ? '/faction/{id}/hof' : '/faction/hof', p, o); },

        /**
         * Get a list of a faction's members. Requires public access key.
         * @param {object} [params] - Optional parameters.
         * @param {number} [params.id] - Faction ID. If omitted, fetches your faction's members.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        members: function(p, o) { return this._call(p && p.id ? '/faction/{id}/members' : '/faction/members', p, o); },

        /**
         * Get your faction's news details. Requires minimal access key with faction API access permissions.
         * @param {object} params - Parameters for the call.
         * @param {string} params.cat - News category type.
         * @param {number} [params.limit=100] - Max 100.
         * @param {string} [params.sort='DESC'] - Sort order.
         * @param {number} [params.from] - Start timestamp.
         * @param {number} [params.to] - End timestamp.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        news: function(p, o) { return this._call('/faction/news', p, o); },

        /**
         * Get your faction's positions details. Requires minimal access key with faction API access permissions.
         * @param {object} [params] - Optional parameters.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        positions: function(p, o) { return this._call('/faction/positions', p, o); },

        /**
         * Get a list of current rackets. Requires public access key.
         * @param {object} [params] - Optional parameters.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        rackets: function(p, o) { return this._call('/faction/rackets', p, o); },

        /**
         * Get raid war details. Requires public access key.
         * @param {object} params - Parameters for the call.
         * @param {number} params.raidWarId - The ID of the raid war.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        raidreport: function(p, o) { return this._call('/faction/{raidWarId}/raidreport', p, o); },

        /**
         * Get a faction's raids history. Requires public access key.
         * @param {object} [params] - Optional parameters.
         * @param {number} [params.id] - Faction ID. If omitted, fetches your faction's history.
         * @param {number} [params.from] - Start timestamp.
         * @param {number} [params.to] - End timestamp.
         * @param {string} [params.sort='DESC'] - Sort order.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        raids: function(p, o) { return this._call(p && p.id ? '/faction/{id}/raids' : '/faction/raids', p, o); },

        /**
         * Get a faction's ranked wars history. Requires public access key.
         * @param {object} [params] - Optional parameters.
         * @param {number} [params.id] - Faction ID. If omitted, fetches your faction's history.
         * @param {number} [params.from] - Start timestamp.
         * @param {number} [params.to] - End timestamp.
         * @param {string} [params.sort='DESC'] - Sort order.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        rankedwars: function(p, o) { return this._call(p && p.id ? '/faction/{id}/rankedwars' : '/faction/rankedwars', p, o); },

        /**
         * Get ranked war details. Requires public access key.
         * @param {object} params - Parameters for the call.
         * @param {number} params.rankedWarId - The ID of the ranked war.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        rankedwarreport: function(p, o) { return this._call('/faction/{rankedWarId}/rankedwarreport', p, o); },

        /**
         * Get faction reports. Requires limited access key.
         * @param {object} [params] - Optional parameters.
         * @param {string} [params.cat] - Report type filter.
         * @param {number} [params.target] - Target User ID filter.
         * @param {number} [params.limit=20] - Max 100.
         * @param {number} [params.offset=0] - Starting position.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        reports: function(p, o) { return this._call('/faction/reports', p, o); },

        /**
         * Get your faction's detailed revives. Requires limited access key with faction API access permissions.
         * @param {object} [params] - Optional parameters.
         * @param {number} [params.limit=100] - Max 100.
         * @param {string} [params.sort='DESC'] - Sort order.
         * @param {number} [params.from] - Start timestamp.
         * @param {number} [params.to] - End timestamp.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        revives: function(p, o) { return this._call('/faction/revives', p, o); },

        /**
         * Get your faction's simplified revives. Requires limited access key with faction API access permissions.
         * @param {object} [params] - Optional parameters.
         * @param {number} [params.limit=1000] - Max 1000.
         * @param {string} [params.sort='DESC'] - Sort order.
         * @param {number} [params.from] - Start timestamp.
         * @param {number} [params.to] - End timestamp.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        revivesfull: function(p, o) { return this._call('/faction/revivesfull', p, o); },

        /**
         * Search factions by name or other criteria. Requires public access key.
         * @param {object} [params] - Optional parameters.
         * @param {string} [params.name] - Name to search for.
         * @param {string[]} [params.filters] - Array of filters.
         * @param {number} [params.limit=20] - Max 50.
         * @param {number} [params.offset=0] - Starting position.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        search: function(p, o) { return this._call('/faction/search', p, o); },
        
        /**
         * Get your faction's challenges stats. Requires minimal access key with faction API access permissions.
         * @param {object} [params] - Optional parameters.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        stats: function(p, o) { return this._call('/faction/stats', p, o); },

        /**
         * Get a list of a faction's territories. Requires public access key.
         * @param {object} [params] - Optional parameters.
         * @param {number} [params.id] - Faction ID. If omitted, fetches your faction's territories.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        territory: function(p, o) { return this._call(p && p.id ? '/faction/{id}/territory' : '/faction/territory', p, o); },

        /**
         * Get a list of territory ownership details. Requires public access key.
         * @param {object} [params] - Optional parameters.
         * @param {number} [params.offset=0] - Starting position.
         * @param {number} [params.limit=20] - Max 500.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        territoryownership: function(p, o) { return this._call('/faction/territoryownership', p, o); },

        /**
         * Get a faction's territory wars history. Requires public access key.
         * @param {object} [params] - Optional parameters.
         * @param {number} [params.id] - Faction ID. If omitted, fetches your faction's history.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        territorywars: function(p, o) { return this._call(p && p.id ? '/faction/{id}/territorywars' : '/faction/territorywars', p, o); },

        /**
         * Get territory war details. Requires public access key.
         * @param {object} params - Parameters for the call.
         * @param {number} params.territoryWarId - The ID of the territory war.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        territorywarreport: function(p, o) { return this._call('/faction/{territoryWarId}/territorywarreport', p, o); },

        /**
         * Get your faction's upgrades. Requires minimal access key with faction API access permissions.
         * @param {object} [params] - Optional parameters.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        upgrades: function(p, o) { return this._call('/faction/upgrades', p, o); },

        /**
         * Get faction warfare details. Requires public access key.
         * @param {object} params - Parameters for the call.
         * @param {string} params.cat - Warfare type: 'ranked', 'territory', 'raid', 'chain', 'db'.
         * @param {number} [params.limit=100] - Max 100.
         * @param {string} [params.sort] - Sort order.
         * @param {number} [params.from] - Start timestamp.
         * @param {number} [params.to] - End timestamp.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        warfare: function(p, o) { return this._call('/faction/warfare', p, o); },

        /**
         * Get a faction's wars & pacts details. Requires public access key.
         * @param {object} [params] - Optional parameters.
         * @param {number} [params.id] - Faction ID. If omitted, fetches your faction's details.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        wars: function(p, o) { return this._call(p && p.id ? '/faction/{id}/wars' : '/faction/wars', p, o); },

        /**
         * Get all available faction selections. Requires public access key.
         * @param {object} [params] - Optional parameters.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        lookup: function(p, o) { return this._call('/faction/lookup', p, o); },

        /**
         * Get current server time. Requires public access key.
         * @param {object} [params] - Optional parameters.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        timestamp: function(p, o) { return this._call('/faction/timestamp', p, o); },

        /**
         * Makes a call to the legacy v1-style faction endpoint.
         * @param {string} selections - Comma-separated list of selections.
         * @param {string} [id] - The faction ID to query. Defaults to the key owner's faction.
         * @param {object} [params] - Additional query parameters.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        legacy: function(s, id = '', p, o) { return TornLibrary.api._call({ path: '/faction', queryParams: { selections: s, id, ...p }, options: o }); }
    },

    /**
     * =================================================================================
     * FORUM SECTION
     * =================================================================================
     */
    forum: {
        _call: function(path, params, options) {
            const { pathParams, queryParams } = TornLibrary.api._prepareParams(path, params);
            return TornLibrary.api._call({ path, pathParams, queryParams, options });
        },

        /**
         * Get publicly available forum categories. Requires public access key.
         * @param {object} [params] - Optional parameters.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        categories: function(p, o) { return this._call('/forum/categories', p, o); },

        /**
         * Get specific forum thread posts. Requires public access key.
         * @param {object} params - Parameters for the call.
         * @param {number} params.threadId - The ID of the thread.
         * @param {number} [params.offset] - Starting position.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        posts: function(p, o) { return this._call('/forum/{threadId}/posts', p, o); },
        
        /**
         * Get specific thread details. Requires public access key.
         * @param {object} params - Parameters for the call.
         * @param {number} params.threadId - The ID of the thread.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        thread: function(p, o) { return this._call('/forum/{threadId}/thread', p, o); },

        /**
         * Get threads for specific forum categories. Requires public access key.
         * @param {object} [params] - Optional parameters.
         * @param {string|number[]} [params.categoryIds] - Comma-separated string or array of category IDs.
         * @param {number} [params.limit=100] - Max 100.
         * @param {string} [params.sort] - Sort order.
         * @param {number} [params.from] - Start timestamp.
         * @param {number} [params.to] - End timestamp.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        threads: function(p, o) { return this._call(p && p.categoryIds ? '/forum/{categoryIds}/threads' : '/forum/threads', p, o); },

        /**
         * Get all available forum selections. Requires public access key.
         * @param {object} [params] - Optional parameters.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        lookup: function(p, o) { return this._call('/forum/lookup', p, o); },

        /**
         * Get current server time. Requires public access key.
         * @param {object} [params] - Optional parameters.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        timestamp: function(p, o) { return this._call('/forum/timestamp', p, o); },
        
        /**
         * Makes a call to the legacy v1-style forum endpoint.
         * @param {string} selections - Comma-separated list of selections.
         * @param {string} [id] - The ID for the selection.
         * @param {object} [params] - Additional query parameters.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        legacy: function(s, id = '', p, o) { return TornLibrary.api._call({ path: '/forum', queryParams: { selections: s, id, ...p }, options: o }); }
    },
    
    /**
     * =================================================================================
     * KEY SECTION
     * =================================================================================
     */
    key: {
        _call: function(path, params, options) {
            const { pathParams, queryParams } = TornLibrary.api._prepareParams(path, params);
            return TornLibrary.api._call({ path, pathParams, queryParams, options });
        },

        /**
         * Get current key info. Available for any key.
         * @param {object} [params] - Optional parameters.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        info: function(p, o) { return this._call('/key/info', p, o); },

        /**
         * Get current key log history. Available for any key.
         * @param {object} [params] - Optional parameters.
         * @param {number} [params.limit=100] - Max 100.
         * @param {number} [params.offset] - Log offset.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        log: function(p, o) { return this._call('/key/log', p, o); },

        /**
         * Makes a call to the legacy v1-style key endpoint.
         * @param {string} selections - Comma-separated list of selections.
         * @param {object} [params] - Additional query parameters.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        legacy: function(s, p, o) { return TornLibrary.api._call({ path: '/key', queryParams: { selections: s, ...p }, options: o }); }
    },

    /**
     * =================================================================================
     * MARKET SECTION
     * =================================================================================
     */
    market: {
         _call: function(path, params, options) {
            const { pathParams, queryParams } = TornLibrary.api._prepareParams(path, params);
            return TornLibrary.api._call({ path, pathParams, queryParams, options });
        },

        /**
         * Get bazaar listings. Requires public access key.
         * @param {object} [params] - Optional parameters.
         * @param {number} [params.id] - Item ID to get specialized bazaar listings.
         * @param {string} [params.cat] - Category of specialized bazaars.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        bazaar: function(p, o) { return this._call(p && p.id ? '/market/{id}/bazaar' : '/market/bazaar', p, o); },

        /**
         * Get item market listings. Requires public access key.
         * @param {object} params - Parameters for the call.
         * @param {number} params.id - Item ID.
         * @param {string} [params.bonus] - Weapon bonus to filter by.
         * @param {number} [params.offset=0] - Starting position.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        itemmarket: function(p, o) { return this._call('/market/{id}/itemmarket', p, o); },

        /**
         * Get properties market listings. Requires public access key.
         * @param {object} params - Parameters for the call.
         * @param {number} params.propertyTypeId - The type ID of the property.
         * @param {number} [params.offset=0] - Starting position.
         * @param {number} [params.limit=20] - Max 100.
         * @param {string} [params.sort] - Sort order.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        properties: function(p, o) { return this._call('/market/{propertyTypeId}/properties', p, o); },

        /**
         * Get properties rental listings. Requires public access key.
         * @param {object} params - Parameters for the call.
         * @param {number} params.propertyTypeId - The type ID of the property.
         * @param {number} [params.offset=0] - Starting position.
         * @param {number} [params.limit=20] - Max 100.
         * @param {string} [params.sort] - Sort order.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        rentals: function(p, o) { return this._call('/market/{propertyTypeId}/rentals', p, o); },

        /**
         * Get all available market selections. Requires public access key.
         * @param {object} [params] - Optional parameters.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        lookup: function(p, o) { return this._call('/market/lookup', p, o); },

        /**
         * Get current server time. Requires public access key.
         * @param {object} [params] - Optional parameters.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        timestamp: function(p, o) { return this._call('/market/timestamp', p, o); },
        
        /**
         * Makes a call to the legacy v1-style market endpoint.
         * @param {string} selections - Comma-separated list of selections.
         * @param {string} [id] - The ID for the selection (e.g., item ID).
         * @param {object} [params] - Additional query parameters.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        legacy: function(s, id = '', p, o) { return TornLibrary.api._call({ path: '/market', queryParams: { selections: s, id, ...p }, options: o }); }
    },
    
    /**
     * =================================================================================
     * RACING SECTION
     * =================================================================================
     */
    racing: {
        _call: function(path, params, options) {
            const { pathParams, queryParams } = TornLibrary.api._prepareParams(path, params);
            return TornLibrary.api._call({ path, pathParams, queryParams, options });
        },

        /**
         * Get cars and their racing stats. Requires public access key.
         * @param {object} [params] - Optional parameters.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        cars: function(p, o) { return this._call('/racing/cars', p, o); },

        /**
         * Get all possible car upgrades. Requires public access key.
         * @param {object} [params] - Optional parameters.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        carupgrades: function(p, o) { return this._call('/racing/carupgrades', p, o); },

        /**
         * Get a list of races. Requires public access key.
         * @param {object} [params] - Optional parameters.
         * @param {number} [params.limit=100] - Max 100.
         * @param {string} [params.sort='DESC'] - Sort order.
         * @param {number} [params.from] - Start timestamp.
         * @param {number} [params.to] - End timestamp.
         * @param {string} [params.cat] - Race category: 'official' or 'custom'.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        races: function(p, o) { return this._call('/racing/races', p, o); },

        /**
         * Get specific race details. Requires public access key.
         * @param {object} params - Parameters for the call.
         * @param {number} params.raceId - The ID of the race.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        race: function(p, o) { return this._call('/racing/{raceId}/race', p, o); },

        /**
         * Get track records. Requires public access key.
         * @param {object} params - Parameters for the call.
         * @param {number} params.trackId - The ID of the track.
         * @param {string} params.cat - Car class ('A', 'B', 'C', 'D', 'E').
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        records: function(p, o) { return this._call('/racing/{trackId}/records', p, o); },

        /**
         * Get race tracks and descriptions. Requires public access key.
         * @param {object} [params] - Optional parameters.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        tracks: function(p, o) { return this._call('/racing/tracks', p, o); },

        /**
         * Get all available racing selections. Requires public access key.
         * @param {object} [params] - Optional parameters.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        lookup: function(p, o) { return this._call('/racing/lookup', p, o); },

        /**
         * Get current server time. Requires public access key.
         * @param {object} [params] - Optional parameters.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        timestamp: function(p, o) { return this._call('/racing/timestamp', p, o); },
        
        /**
         * Makes a call to the legacy v1-style racing endpoint.
         * @param {string} selections - Comma-separated list of selections.
         * @param {string} [id] - The ID for the selection.
         * @param {object} [params] - Additional query parameters.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        legacy: function(s, id = '', p, o) { return TornLibrary.api._call({ path: '/racing', queryParams: { selections: s, id, ...p }, options: o }); }
    },

    /**
     * =================================================================================
     * PROPERTY SECTION
     * =================================================================================
     */
    property: {
        _call: function(path, params, options) {
            const { pathParams, queryParams } = TornLibrary.api._prepareParams(path, params);
            return TornLibrary.api._call({ path, pathParams, queryParams, options });
        },

        /**
         * Get a specific property. Requires public access key.
         * @param {object} params - Parameters for the call.
         * @param {number} params.id - The Property ID.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        property: function(p, o) { return this._call('/property/{id}/property', p, o); },

        /**
         * Get all available property selections. Requires public access key.
         * @param {object} [params] - Optional parameters.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        lookup: function(p, o) { return this._call('/property/lookup', p, o); },

        /**
         * Get current server time. Requires public access key.
         * @param {object} [params] - Optional parameters.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        timestamp: function(p, o) { return this._call('/property/timestamp', p, o); },

        /**
         * Makes a call to the legacy v1-style property endpoint.
         * @param {string} selections - Comma-separated list of selections.
         * @param {string} [id] - The ID for the selection.
         * @param {object} [params] - Additional query parameters.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        legacy: function(s, id = '', p, o) { return TornLibrary.api._call({ path: '/property', queryParams: { selections: s, id, ...p }, options: o }); }
    },

    /**
     * =================================================================================
     * TORN SECTION
     * =================================================================================
     */
    torn: {
        _call: function(path, params, options) {
            const { pathParams, queryParams } = TornLibrary.api._prepareParams(path, params);
            return TornLibrary.api._call({ path, pathParams, queryParams, options });
        },

        /**
         * Get attack log details. Requires public key.
         * @param {object} params - Parameters for the call.
         * @param {string} params.log - The code of the attack log.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        attacklog: function(p, o) { return this._call('/torn/attacklog', p, o); },

        /**
         * Get bounties. Requires public key.
         * @param {object} [params] - Optional parameters.
         * @param {number} [params.limit=100] - Max 100.
         * @param {number} [params.offset=0] - Starting position.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        bounties: function(p, o) { return this._call('/torn/bounties', p, o); },

        /**
         * Get calendar information. Requires public access key.
         * @param {object} [params] - Optional parameters.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        calendar: function(p, o) { return this._call('/torn/calendar', p, o); },

        /**
         * Get crimes information. Requires public access key.
         * @param {object} [params] - Optional parameters.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        crimes: function(p, o) { return this._call('/torn/crimes', p, o); },

        /**
         * Get education information. Requires public access key.
         * @param {object} [params] - Optional parameters.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        education: function(p, o) { return this._call('/torn/education', p, o); },

        /**
         * Get faction hall of fame positions for a specific category. Requires public access key.
         * @param {object} params - Parameters for the call.
         * @param {string} params.cat - Leaderboards category.
         * @param {number} [params.limit=100] - Max 100.
         * @param {number} [params.offset=0] - Starting position.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        factionhof: function(p, o) { return this._call('/torn/factionhof', p, o); },

        /**
         * Get full faction tree. Requires public access key.
         * @param {object} [params] - Optional parameters.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        factiontree: function(p, o) { return this._call('/torn/factiontree', p, o); },

        /**
         * Get player hall of fame positions for a specific category. Requires public key.
         * @param {object} params - Parameters for the call.
         * @param {string} params.cat - Leaderboards category.
         * @param {number} [params.limit=100] - Max 100.
         * @param {number} [params.offset=0] - Starting position.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        hof: function(p, o) { return this._call('/torn/hof', p, o); },

        /**
         * Get information about ammo. Requires public key.
         * @param {object} [params] - Optional parameters.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        itemammo: function(p, o) { return this._call('/torn/itemammo', p, o); },

        /**
         * Get information about weapon upgrades. Requires public key.
         * @param {object} [params] - Optional parameters.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        itemmods: function(p, o) { return this._call('/torn/itemmods', p, o); },

        /**
         * Get information about items. Requires public key.
         * @param {object} [params] - Optional parameters.
         * @param {string|number[]} [params.ids] - A single item ID or comma-separated list/array of item IDs.
         * @param {string} [params.cat] - Item category if not querying by IDs.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        items: function(p, o) { return this._call(p && p.ids ? '/torn/{ids}/items' : '/torn/items', p, o); },

        /**
         * Get available log categories. Requires public key.
         * @param {object} [params] - Optional parameters.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        logcategories: function(p, o) { return this._call('/torn/logcategories', p, o); },

        /**
         * Get available log types. Requires public key.
         * @param {object} [params] - Optional parameters.
         * @param {number} [params.logCategoryId] - If provided, gets types for a specific log category.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        logtypes: function(p, o) { return this._call(p && p.logCategoryId ? '/torn/{logCategoryId}/logtypes' : '/torn/logtypes', p, o); },

        /**
         * Get organized crimes information. Requires public access key.
         * @param {object} [params] - Optional parameters.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        organizedcrimes: function(p, o) { return this._call('/torn/organizedcrimes', p, o); },

        /**
         * Get properties details. Requires public access key.
         * @param {object} [params] - Optional parameters.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        properties: function(p, o) { return this._call('/torn/properties', p, o); },

        /**
         * Get Subcrimes information for a specific crime. Requires public access key.
         * @param {object} params - Parameters for the call.
         * @param {number} params.crimeId - The ID of the parent crime.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        subcrimes: function(p, o) { return this._call('/torn/{crimeId}/subcrimes', p, o); },
        
        /**
         * Get territory details. Requires public access key.
         * @param {object} [params] - Optional parameters.
         * @param {string|string[]} [params.ids] - Comma-separated string or array of territory IDs.
         * @param {number} [params.offset=0] - Starting position.
         * @param {number} [params.limit=20] - Max 250.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        territory: function(p, o) { return this._call('/torn/territory', p, o); },

        /**
         * Get all available Torn selections. Requires public key.
         * @param {object} [params] - Optional parameters.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        lookup: function(p, o) { return this._call('/torn/lookup', p, o); },

        /**
         * Get current server time. Requires public key.
         * @param {object} [params] - Optional parameters.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        timestamp: function(p, o) { return this._call('/torn/timestamp', p, o); },
        
        /**
         * Makes a call to the legacy v1-style torn endpoint.
         * @param {string} selections - Comma-separated list of selections.
         * @param {string} [id] - The ID for the selection (e.g., item ID).
         * @param {object} [params] - Additional query parameters.
         * @param {object} [options] - Library-specific options.
         * @returns {Promise<object>} A promise that resolves with the API response.
         */
        legacy: function(s, id = '', p, o) { return TornLibrary.api._call({ path: '/torn', queryParams: { selections: s, id, ...p }, options: o }); }
    }
};

TornLibrary.dom = {
    /**
     * DOM Manipulation, Observation, and Interaction Utilities.
     */
    /**
     * Waits for a specific element to appear in the DOM, then executes a callback.
     * @param {string} selector - The CSS selector of the element to wait for.
     * @param {function(HTMLElement): void} callback - Function to execute once the element is found.
     * @param {object} [options={}] - Configuration options.
     * @param {HTMLElement} [options.target=document.body] - The node to observe for changes.
     * @param {boolean} [options.disconnect=true] - Whether to stop observing after the element is found.
     * @returns {MutationObserver|null} The observer instance or null if the element already existed.
     */
    waitForElement(selector, callback, options = {}) {
        const { target = document.body, disconnect = true } = options;
        const existingElement = document.querySelector(selector);
        if (existingElement) {
            callback(existingElement);
            return null;
        }
        const observer = new MutationObserver((mutations, obs) => {
            const element = document.querySelector(selector);
            if (element) {
                if (disconnect) obs.disconnect();
                callback(element);
            }
        });
        observer.observe(target, { childList: true, subtree: true });
        return observer;
    },

    /**
     * Injects a string of CSS into the document's <head>.
     * @param {string} css - The CSS rules to add to the page.
     */
    addStyle(css) {
        if (typeof GM_addStyle === 'function') {
            GM_addStyle(css);
        } else {
            const head = document.head || document.getElementsByTagName('head')[0];
            if (head) {
                const style = document.createElement('style');
                style.type = 'text/css';
                style.textContent = css;
                head.appendChild(style);
            }
        }
    },

    /**
     * Programmatically triggers an event on a DOM element. Essential for interacting
     * with frameworks like React where direct value changes are not always detected.
     * @param {HTMLElement} element - The element to dispatch the event on.
     * @param {string} eventName - The name of the event to trigger (e.g., 'click', 'input', 'keyup').
     * @param {object} [options={bubbles: true}] - Options for the event constructor.
     */
    triggerEvent(element, eventName, options = { bubbles: true }) {
        const event = new Event(eventName, options);
        element.dispatchEvent(event);
    },

    /**
     * Repeatedly executes a callback function until it returns true or a timeout is reached.
     * @param {function(): boolean} callback - The function to execute. Should return true to stop polling.
     * @param {number} interval - The time in milliseconds between each execution.
     * @param {number} [timeout=10000] - The maximum time in milliseconds to continue polling.
     */
    poll(callback, interval, timeout = 10000) {
        const poller = setInterval(() => {
            if (callback()) clearInterval(poller);
        }, interval);
        setTimeout(() => clearInterval(poller), timeout);
    },

    /**
     * Continuously watches for new nodes matching a selector and fires a callback for each.
     * @param {string} selector - The CSS selector for nodes to watch for.
     * @param {function(HTMLElement): void} callback - The function to execute for each new node.
     * @param {HTMLElement} [target=document.body] - The root element to observe.
     * @returns {MutationObserver} The active observer instance.
     */
    onNodeAdded(selector, callback, target = document.body) {
        const observer = new MutationObserver((mutations) => {
            for (const mutation of mutations) {
                if (mutation.addedNodes.length > 0) {
                    mutation.addedNodes.forEach(node => {
                        if (node.nodeType === Node.ELEMENT_NODE) {
                            if (node.matches(selector)) callback(node);
                            node.querySelectorAll(selector).forEach(callback);
                        }
                    });
                }
            }
        });
        observer.observe(target, { childList: true, subtree: true });
        return observer;
    }
};

TornLibrary.storage = {
    /**
     * Persistent Storage Utilities.
     */
    local: {
        /**
         * Wrapper for browser `localStorage`.
         */
        get: (key, defaultValue = null) => {
            const value = localStorage.getItem(key);
            // Safer parsing for JSON
            try {
                return value !== null ? JSON.parse(value) : defaultValue;
            } catch (e) {
                return value !== null ? value : defaultValue;
            }
        },
        set: (key, value) => {
            const valueToStore = typeof value === 'object' ? JSON.stringify(value) : value;
            localStorage.setItem(key, valueToStore);
        }
    },

    gm: {
        /**
         * Wrapper for userscript manager storage (e.g., `GM_setValue`), handling API inconsistencies.
         */
        getValue: async (key, defaultValue = null) => {
            if (typeof GM_getValue === 'function') return GM_getValue(key, defaultValue);
            if (typeof GM !== 'undefined' && typeof GM.getValue === 'function') return await GM.getValue(key, defaultValue);
            console.warn('TornLibrary: Greasemonkey storage is not available.');
            return defaultValue;
        },
        setValue: async (key, value) => {
            if (typeof GM_setValue === 'function') return GM_setValue(key, value); // GM_setValue can be async or sync
            if (typeof GM !== 'undefined' && typeof GM.setValue === 'function') return await GM.setValue(key, value);
            console.warn('TornLibrary: Greasemonkey storage is not available.');
        },
        // **NEW**: Added for completeness and use in LogManager
        deleteValue: async (key) => {
            if (typeof GM_deleteValue === 'function') return GM_deleteValue(key);
            if (typeof GM !== 'undefined' && typeof GM.deleteValue === 'function') return await GM.deleteValue(key);
            console.warn('TornLibrary: Greasemonkey storage is not available.');
        }
    },

    /**
     * Creates a manager for a persistent, size-limited log in GM storage.
     * @param {object} options - Configuration for the log manager.
     * @param {string} options.key - The storage key for the log.
     * @param {number} [options.limit=50] - The maximum number of entries to keep in the log.
     * @returns {{get: function(): Promise<Array>, add: function(any): Promise<void>, clear: function(): Promise<void>}} Log manager object.
     */
    async createLogManager({ key, limit = 50 }) {
        let log = [];
        try {
            // **FIX**: Use the async wrapper
            const storedLog = await this.gm.getValue(key, '[]');
            log = JSON.parse(storedLog);
        } catch (e) {
            log = [];
        }

        // **FIX**: save is now async
        const save = async () => {
            await this.gm.setValue(key, JSON.stringify(log));
        };

        return {
            // **FIX**: get now returns a Promise
            get: async () => {
                // Re-fetch from storage to ensure it's up to date if multiple tabs are open
                const currentLog = await this.gm.getValue(key, '[]');
                try {
                    return JSON.parse(currentLog);
                } catch {
                    return [];
                }
            },
            // **FIX**: add is now async
            add: async (entry) => {
                log.unshift(entry); // Add to the beginning
                if (log.length > limit) log = log.slice(0, limit);
                await save();
            },
            // **FIX**: clear is now async
            clear: async () => {
                log = [];
                await this.gm.deleteValue(key);
            }
        };
    }
};

TornLibrary.intercept = {
    /**
     * Intercepts native `fetch` requests, allowing for response inspection or modification.
     * @param {function(Response, Array): Promise<Response|void>} callback - Receives the cloned response and original request arguments.
     * @returns {function(): void} A function to stop intercepting.
     */
    fetch(callback) {
        const originalFetch = window.fetch;
        window.fetch = async (...args) => {
            const response = await originalFetch(...args);
            try {
                const modifiedResponse = await callback(response.clone(), args);
                return modifiedResponse instanceof Response ? modifiedResponse : response;
            } catch (e) {
                console.error('TornLibrary.intercept.fetch callback error:', e);
                return response; // Return original response on callback error
            }
        };
        // Return a function to restore the original fetch
        return () => { window.fetch = originalFetch; };
    },

    /**
     * Intercepts jQuery `$.ajax` requests for inspection or modification.
     * @param {function(object): void} callback - Receives the jQuery ajax options object.
     * @returns {function(): void|undefined} A function to stop intercepting, or undefined if jQuery is not present.
     */
    ajax(callback) {
        if (typeof $ === 'undefined' || typeof $.ajax !== 'function') return;
        const originalAjax = $.ajax;
        $.ajax = function(options) {
            try {
                callback(options);
            } catch (e) {
                console.error('TornLibrary.intercept.ajax callback error:', e);
            }
            return originalAjax.apply(this, arguments);
        };
        // Return a function to restore the original ajax
        return () => { $.ajax = originalAjax; };
    }
};

TornLibrary.ui = {
    /**
     * User Interface Generation & Interaction.
     */
    _stylesAdded: false,
    _addStyles() {
        if (this._stylesAdded) return;
        TornLibrary.dom.addStyle(`
            .tl-popup-overlay {
                position: fixed; top: 0; left: 0; right: 0; bottom: 0;
                background: rgba(0,0,0,0.7);
                display: flex; justify-content: center; align-items: center;
                z-index: 1000;
                backdrop-filter: blur(3px);
            }
            .tl-popup-content {
                background: #333; color: #eee; border-radius: 8px; border: 1px solid #444;
                width: 90%; max-height: 90vh; overflow-y: auto;
                padding: 20px; box-shadow: 0 5px 20px rgba(0,0,0,0.3);
            }
            .tl-popup-title {
                font-size: 1.2em; font-weight: bold; margin-bottom: 15px;
                padding-bottom: 10px; border-bottom: 1px solid #555;
                display: flex; justify-content: space-between; align-items: center;
            }
            .tl-popup-close {
                background: none; border: none; color: #eee; font-size: 1.5em;
                cursor: pointer; padding: 0 5px; line-height: 1;
            }
            .tl-popup-close:hover { color: #fff; }

            .tl-toggle-container {
                display: flex; align-items: center; justify-content: space-between;
                margin: 10px 0;
            }
            .tl-toggle-switch {
                position: relative; display: inline-block; width: 45px; height: 24px;
                flex-shrink: 0;
            }
            .tl-toggle-switch input { opacity: 0; width: 0; height: 0; }
            .tl-toggle-slider {
                position: absolute; cursor: pointer; top: 0; left: 0; right: 0; bottom: 0;
                background-color: #555; transition: .3s; border-radius: 12px;
            }
            .tl-toggle-slider::before {
                position: absolute; content: ''; height: 20px; width: 20px;
                left: 2px; bottom: 2px; background-color: white;
                transition: .3s; border-radius: 50%;
            }
            .tl-toggle-switch input:checked + .tl-toggle-slider { background-color: #4CAF50; }
            .tl-toggle-switch input:checked + .tl-toggle-slider::before { transform: translateX(21px); }

            .tl-notification {
                position: fixed; bottom: 20px; right: 20px;
                color: white; padding: 12px 20px; border-radius: 4px;
                box-shadow: 0 2px 8px rgba(0,0,0,0.3); z-index: 9999;
                font-size: 14px; opacity: 0; transition: opacity 0.3s ease, transform 0.3s ease;
                transform: translateY(20px);
            }
            .tl-notification.tl-visible { opacity: 1; transform: translateY(0); }
            .tl-notification.tl-info { background: #2196F3; }
            .tl-notification.tl-success { background: #4CAF50; }
            .tl-notification.tl-error { background: #f44336; }
        `);
        this._stylesAdded = true;
    },

    /**
     * Creates and displays a modal popup.
     * @param {object} options - Configuration for the popup.
     * @param {string} options.title - The title of the popup.
     * @param {string|HTMLElement} options.content - The HTML string or DOM element for the popup body.
     * @param {string} [options.id=''] - An ID for the main popup element.
     * @param {string} [options.maxWidth='600px'] - The max-width of the popup.
     * @returns {HTMLElement} The created popup element.
     */
    createPopup({ title, content, id = '', maxWidth = '600px' }) {
        this._addStyles();
        const existing = document.getElementById(id);
        if (existing) existing.remove();

        const popup = document.createElement('div');
        if (id) popup.id = id;
        popup.className = 'tl-popup-overlay';

        popup.innerHTML = `
            <div class="tl-popup-content" style="max-width: ${maxWidth};">
                <div class="tl-popup-title">
                    <span>${TornLibrary.utils.escapeHTML(title)}</span>
                    <button class="tl-popup-close" title="Close">×</button>
                </div>
                <div class="tl-popup-body"></div>
            </div>
        `;

        const body = popup.querySelector('.tl-popup-body');
        if (typeof content === 'string') body.innerHTML = content;
        else body.appendChild(content);

        const close = () => popup.remove();
        popup.querySelector('.tl-popup-close').addEventListener('click', close);
        popup.addEventListener('click', (e) => { if (e.target === popup) close(); });

        document.body.appendChild(popup);
        return popup;
    },

    /**
     * Creates a CSS-based toggle switch.
     * @param {object} options - Configuration for the toggle.
     * @param {string} options.label - The text label for the toggle.
     * @param {boolean} [options.checked=false] - The initial state of the toggle.
     * @param {function(Event): void} [options.onChange] - Callback function for state change.
     * @returns {HTMLElement} The container element for the toggle.
     */
    createToggle({ label, checked = false, onChange }) {
        this._addStyles();
        const container = document.createElement('div');
        container.className = 'tl-toggle-container';

        const labelEl = document.createElement('label');
        labelEl.textContent = label;

        const switchEl = document.createElement('label');
        switchEl.className = 'tl-toggle-switch';

        const input = document.createElement('input');
        input.type = 'checkbox';
        input.checked = checked;
        
        if (onChange) {
            input.addEventListener('change', onChange);
        }

        const slider = document.createElement('span');
        slider.className = 'tl-toggle-slider';

        switchEl.append(input, slider);
        
        const inputId = `tl-toggle-${Math.random().toString(36).substring(2, 9)}`;
        input.id = inputId;
        labelEl.htmlFor = inputId;

        container.append(labelEl, switchEl);
        return container;
    },

    /**
     * Shows a temporary on-screen notification.
     * @param {string} message - The message to display.
     * @param {'info'|'success'|'error'} [type='info'] - The type of notification.
     * @param {number} [duration=3000] - How long to display the notification in ms.
     */
    showNotification(message, type = 'info', duration = 3000) {
        this._addStyles();
        const notif = document.createElement('div');
        notif.className = `tl-notification tl-${type}`;
        notif.textContent = message;
        document.body.appendChild(notif);
        
        const removeNotif = () => {
            notif.classList.remove('tl-visible');
            notif.addEventListener('transitionend', () => notif.remove(), { once: true });
        };
        
        requestAnimationFrame(() => {
            notif.classList.add('tl-visible');
        });

        setTimeout(removeNotif, duration);
    },

    /**
     * A safe wrapper for `GM_registerMenuCommand`.
     * @param {string} label - The text to display in the menu.
     * @param {function(): void} callback - The function to call when the command is clicked.
     * @param {object} [options] - Options for the menu command.
     */
    addMenuCommand(label, callback, options) {
        if (typeof GM_registerMenuCommand === 'function') {
            GM_registerMenuCommand(label, callback, options);
        }
    }
};

TornLibrary.export = {
    /**
     * Data Export Utilities.
     */
    /**
     * Triggers a browser download for the provided text data.
     * @param {string} dataString - The content of the file.
     * @param {string} filename - The name of the file to be downloaded.
     * @param {string} [mimeType='text/plain'] - The MIME type of the file.
     */
    download(dataString, filename, mimeType = 'text/plain') {
        const blob = new Blob([dataString], { type: `${mimeType};charset=utf-8` });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    },

    /**
     * Formats an array of objects as a CSV string.
     * @param {Array<object>} data - The data to format.
     * @param {Array<{key:string, label:string}>} headers - Maps object keys to column labels.
     * @returns {string} The CSV formatted string.
     */
    asCSV(data, headers) {
        const escape = TornLibrary.utils.escapeCSVField;
        const headerRow = headers.map(h => escape(h.label)).join(',');
        const bodyRows = data.map(row => headers.map(h => escape(row[h.key] ?? '')).join(','));
        return [headerRow, ...bodyRows].join('\n');
    },

    /**
     * Formats an array of objects as an HTML table string.
     * @param {Array<object>} data - The data to format.
     * @param {Array<{key:string, label:string}>} headers - Maps object keys to column labels.
     * @returns {string} The HTML table string.
     */
    asHTML(data, headers) {
        const format = {
            table: (h, b) => `<table><thead>${h}</thead><tbody>${b}</tbody></table>`,
            header: (heads) => `<tr>${heads.map(h => `<th>${TornLibrary.utils.escapeHTML(h.label)}</th>`).join('')}</tr>`,
            row: (cells) => `<tr>${cells.map(c => `<td>${TornLibrary.utils.escapeHTML(c)}</td>`).join('')}</tr>`
        };
        const headerRow = format.header(headers);
        const bodyRows = data.map(row => format.row(headers.map(h => row[h.key] ?? ''))).join('');
        return format.table(headerRow, bodyRows);
    },

    /**
     * Formats an array of objects as a Markdown table string.
     * @param {Array<object>} data - The data to format.
     * @param {Array<{key:string, label:string}>} headers - Maps object keys to column labels.
     * @returns {string} The Markdown table string.
     */
    asMarkdown(data, headers) {
        const headerRow = `| ${headers.map(h => h.label).join(' | ')} |`;
        const separatorRow = `| ${headers.map(() => '---').join(' | ')} |`;
        const bodyRows = data.map(row => `| ${headers.map(h => (row[h.key] ?? '').toString().replace(/\|/g, '\\|')).join(' | ')} |`);
        return [headerRow, separatorRow, ...bodyRows].join('\n');
    }
};